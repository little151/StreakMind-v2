I added a new OpenAI API key to Replit Secrets as OPENAI_API_KEY.
Please integrate ChatGPT for chat replies and fix data-driven updates in one pass.
Be careful with my quota: do this in a single batch, and do not echo my secrets to logs.

GOALS
1) Use OpenAI (gpt-4o-mini) for chat responses (friendly, concise, encouraging tone).
2) Keep existing JSON storage in data.json, but fix streak logic:
   - A streak for an activity increases at most once per calendar day.
   - Multiple logs in the same day for the same activity should NOT increment the streak again.
3) After every chat log, the dashboard must reload data and visually update (points, streaks, charts).
4) Chat bubbles: user ‚Üí right; bot ‚Üí left.
5) Default theme: dark monochrome. Light theme remains optional via toggle.
6) Make the layout responsive for mobile (no distortion).
7) Add an Info (‚ÑπÔ∏è) button that shows allowed chat commands/patterns in a modal.
8) Add simple badge rules + icons and show them in Scores/History.

DEPENDENCIES
- Install: npm i openai dayjs
(If TypeScript types needed: npm i -D @types/node)

BACKEND CHANGES (server/index.ts or the current server entry)
- Import and init OpenAI once, using the environment secret:
  ---
  import OpenAI from "openai";
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  ---

- Ensure we have helper functions for data read/write (already present). Add safe initial shape:
  data = { logs: [], scores: [], visualizations: {}, streaks: {} }

- Update/replace POST /api/chat flow like this (pseudo-implementation; please implement):
  1) Receive { message } string.
  2) Parse intent with lightweight rules:
     - "did 2 coding questions", "solved 3 dsa", "coded 30 mins"
       => activity: "coding", amount, unit ("questions" or "minutes")
     - "gym done", "went to gym", "workout"
       => activity: "gym", amount=1, unit="session"
     - "slept 7 hours"
       => activity: "sleep", amount=7, unit="hours"
     - support 'yesterday' to shift date by -1 day
  3) If it's a log intent:
     - Append a log: { id, activity, amount, unit, date:"YYYY-MM-DD", message, timestamp }
     - Points (example): coding=5*amount (questions) or 1 per minute/5 mins; gym=10 per session; sleep=amount (hours)
     - Streak rule:
         * Determine if an entry for that activity exists for that same date already.
         * Only if there was none, increment streaks[activity] by 1; else leave it unchanged.
  4) Save data.json
  5) Build a short friendly reply (see OpenAI below), including what was logged and points awarded.

- Add/ensure GET /api/stats returns:
  {
    totalPoints, // sum of scores.points
    streaks,     // per activity counts
    badges,      // computed array
    logs         // last N logs (e.g., 50)
  }

- Badges (basic computed rules, do not store):
  * 3-day streak in any activity => "üî• 3-day Spark"
  * 7-day streak => "üåü 7-day Glow"
  * 14-day streak => "üèÖ 14-day Medal"
  * 30-day streak => "üèÜ 30-day Champion"
  Compute badges from current streaks and return in /api/stats.

- OpenAI call in /api/chat (use gpt-4o-mini, short outputs):
  ---
  const system = `You are StreakMind, a friendly, upbeat accountability buddy.
  Style: extremely concise (1‚Äì2 sentences), positive, specific; mention points/streak only if updated.
  Never give medical, legal, or financial advice.`;

  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0.7,
    max_tokens: 120,
    messages: [
      { role: "system", content: system },
      { role: "user", content: message }
    ]
  });
  const reply = completion.choices?.[0]?.message?.content?.trim() || 
                "Logged! Keep it up.";
  ---
  If OPENAI_API_KEY is missing or request fails, return a fallback reply:
  "‚ö†Ô∏è I couldn‚Äôt reach the brain right now, but your log is saved."

- Add GET /api/health for uptime pings (if not present).

FRONTEND CHANGES (client/)
- Ensure the app is built with Vite and served statically from client/dist.
- After sending a chat message and receiving /api/chat response, immediately fetch /api/stats and re-render:
  ---
  async function refreshStats() {
    const stats = await fetch("/api/stats").then(r=>r.json());
    // update total points, streak labels, badges, and all charts
  }
  // After chat POST succeeds:
  await refreshStats();
  ---
- Fix chat bubble alignment with clear CSS classes:
  .msg { display:flex; margin:8px 0; }
  .msg.user { justify-content: flex-end; }
  .msg.bot  { justify-content: flex-start; }
  .bubble { max-width: 72ch; padding: 10px 14px; border-radius: 16px; }
  .msg.user .bubble { border: 1px solid var(--accent); }
  .msg.bot  .bubble { opacity: 0.9; }
  Ensure the DOM assigns "user" or "bot" class appropriately.

- Default theme: DARK.
  On first load, set document.documentElement.dataset.theme = "dark".
  Keep the toggle but initialize to dark if no saved preference.
  Use CSS variables like:
    :root[data-theme="dark"] { --bg:#0e0e0e; --fg:#f6f6f6; --muted:#9aa0a6; --accent:#8b5cf6; }
    :root[data-theme="light"] { --bg:#ffffff; --fg:#111111; --muted:#555; --accent:#8b5cf6; }

- Responsiveness:
  * Add <meta name="viewport" content="width=device-width, initial-scale=1" />
  * Use grid/flex with minmax and clamp for fonts/sizes.
  * Avoid fixed pixel widths; prefer width:100%, max-width, and gap.
  * On narrow screens, stack: Chat on top, Dashboard below; on wide screens, side-by-side.

- Info (‚ÑπÔ∏è) button:
  Add a small icon in the top bar. On click, open a modal explaining allowed commands (MVP):
    ‚Ä¢ "Did 2 coding questions"
    ‚Ä¢ "Gym done" / "Workout complete"
    ‚Ä¢ "Slept 7 hours"
    ‚Ä¢ "Show coding as heatmap"
    ‚Ä¢ Include "yesterday" to log for yesterday
  Keep this content in a simple HTML modal; no extra libs required.

- Ensure dashboard visuals are data-driven and refresh without page reload:
  * After /api/chat ‚Üí await refreshStats() ‚Üí update:
      - Points card
      - Per-activity streak counters
      - Badges (render as emoji or small SVGs)
      - Heatmap/progress ring/bar chart (bind to stats/logs)
  * If charts are placeholder-only, convert them to read from /api/stats.

BUILD & SERVE
- Run once:
  (cd client && npm install && npm run build)
- Ensure server serves client/dist in production mode (it already calls serveStatic; confirm path).
- Start the server (Run button) and verify:
  1) User message appears on the right; bot on the left.
  2) Logging ‚ÄúGym done‚Äù increments the gym streak the first time for that day only.
  3) Logging multiple times same day does NOT increment streak again, but can still add points if designed.
  4) After each log, points/streaks/badges/charts update immediately.
  5) Default theme is dark; toggle to light still works.
  6) Layout looks good on mobile (no overflow/distortion).
  7) Info modal opens and lists valid commands.

QUALITY & SAFETY
- Do not log secrets. Never print process.env.OPENAI_API_KEY.
- Handle missing key or API errors gracefully with a friendly fallback.
- Keep responses brief (1‚Äì2 sentences).
- Keep OpenAI token usage small (max_tokens:120, gpt-4o-mini).

Please implement all of the above and rebuild in one batch.
